创建用户
sudo adduser dbuser

set password
\password username


CREATE USER dbuser WITH PASSWORD 'password';
CREATE DATABASE exampledb OWNER dbuser;
GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;

\h：查看SQL命令的解释，比如\h select。
\?：查看psql命令列表。
\l：列出所有数据库。
\c [database_name]：连接其他数据库。
\d：列出当前数据库的所有表格。
\d [table_name]：列出某一张表格的结构。
\du：列出所有用户。
\e：打开文本编辑器。
\conninfo：列出当前数据库和连接的信息。


pg_dump -d <database_name> -t <table_name> > file.sql
pg_dump --no-owner -d <database_name> -t <table_name> > file.sql
pg_dump -t MyTable mydb > db.sql

Single transaction restore:
you can use –single-transaction in your restore command. It wraps out entire restore operation in one transaction, if something goes wrong it rollbacks all the changes.
psql –single-transaction -h localhost -p 5432 -U postgres -d mydb < backup.sql

Backup: pg_dump -h localhost -p 5432 -U postgres -d mydb | gzip > backup.gz
Restore: gunzip -c backup.gz | psql -h localhost -p 5432 -U postgres -d mydb

Backup: pg_dump -h localhost -p 5432 -U postgres -d mydb | split -b 2m – backup.sql
Restore: cat backup.sql* | psql -h localhost -p 5432 -U postgres -d mydb

Backup: pg_dump -h localhost -p 5432 -U postgres -d mydb | gzip | split -b 1m – backup.gz
Restore: cat backup.gz* | gunzip | psql -h localhost -p 5432 -U postgres -d mydb


\COPY (select id,name from tablename) TO 'filepath/aa.csv' DELIMITER ',' CSV HEADER;

Should work with a CASE in the order by:
SELECT * 
FROM users 
ORDER BY case id when 2 then 1
                 when 3 then 2
                 when 1 then 3
         end

SELECT * FROM users ORDER BY (id+1)%3

select *
from comments
where id in (1,3,2,4)
order by position(id::text in '2,3,2,4')

\x auto
自动调整显示

table * instead select * from


CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
CREATE TABLE person (
    name text,
    current_mood mood
);
INSERT INTO person VALUES ('Moe', 'happy');
SELECT * FROM person WHERE current_mood = 'happy';
 name | current_mood 
------+--------------
 Moe  | happy

SELECT person.name, holidays.num_weeks FROM person, holidays
  WHERE person.current_mood::text = holidays.happiness::text;




WITH 
  cubed_data AS (
     SELECT 
        dimension1_id,
        dimension2_id,
        dimension3_id,
        measure_id,
        SUM(value) value
     FROM
        source_data
     GROUP BY
        CUBE(dimension1, dimension2, dimension3),
        measure
  ), 
  dimension1_label AS(
     SELECT 
        dimension1_id,
        dimension1_label
     FROM 
        labels 
     WHERE 
        object = 'dimension1'
  ), ...
SELECT 
  *
FROM  
  cubed_data
  JOIN dimension1_label USING (dimension1_id)
  JOIN dimension2_label USING (dimension2_id)
  JOIN dimension3_label USING (dimension3_id)
  JOIN measure_label USING (measure_id)
