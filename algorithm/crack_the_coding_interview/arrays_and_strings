Implement an algorithm to determine if a string has all unique characters. What if
you can not use additional data structures?

For simplicity, assume char set is ASCII (if not, we need to increase the storage size. The rest
of the logic would be the same). NOTE: This is a great thing to point out to your interviewer!

public static boolean isUniqueChars2(String str) {
	boolean[] char_set = new boolean[256];
	for (int i = 0; i < str.length(); i++) {
		int val = str.charAt(i);
		if (char_set[val]) return false;
		char_set[val] = true;
	}
	return true;
}
Time complexity is O(n), where n is the length of the string, and space complexity is O(n).
We can reduce our space usage a little bit by using a bit vector. We will assume, in the below
code, that the string is only lower case ‘a’ through ‘z’. This will allow us to use just a single int
public static boolean isUniqueChars(String str) {
	int checker = 0;
	for (int i = 0; i < str.length(); ++i) {
		int val = str.charAt(i) - ‘a’;
		if ((checker & (1 << val)) > 0) return false;
		checker |= (1 << val);
	}
	return true;
}


Write code to reverse a C-Style String. (C-String means that “abcd” is represented as
five characters, including the null character.)

This is a classic interview question. The only “gotcha” is to try to do it in place, and to be care-
ful for the null character.

void reverse(char *str) {
	char * end = str;
	char tmp;
	if (str) {
		while (*end) {
			++end;
		}
		--end;
		while (str < end) {
			tmp = *str;
			*str++ = *end;
			*end-- = tmp;
		}
	}
}



Design an algorithm and write code to remove the duplicate characters in a string
without using any additional buffer. NOTE: One or two additional variables are fine.
An extra copy of the array is not.
FOLLOW UP
Write the test cases for this method.
			
First, ask yourself, what does the interviewer mean by an additional buffer? Can we use an
additional array of constant size?
Algorithm—No (Large) Additional Memory:
1.	 For each character, check if it is a duplicate of already found characters.
2.	 Skip duplicate characters and update the non duplicate characters.
Time complexity is O(N 2 ).
public static void removeDuplicates(char[] str) {
	if (str == null) return;
	int len = str.length;
	if (len < 2) return;
	int tail = 1;
	
for (int i = 1; i < len; ++i) {
		int j;
		for (j = 0; j < tail; ++j) {
			if (str[i] == str[j]) break;
		}
		if (j == tail) {
			str[tail] = str[i];
			++tail;
		}
	}
	str[tail] = 0;
}
Test Cases:
1.	 String does not contain any duplicates, e.g.: abcd
2.	 String contains all duplicates, e.g.: aaaa
3.	 Null string
4.	 String with all continuous duplicates, e.g.: aaabbb
