Implement an algorithm to determine if a string has all unique characters. What if
you can not use additional data structures?

For simplicity, assume char set is ASCII (if not, we need to increase the storage size. The rest
of the logic would be the same). NOTE: This is a great thing to point out to your interviewer!

public static boolean isUniqueChars2(String str) {
	boolean[] char_set = new boolean[256];
	for (int i = 0; i < str.length(); i++) {
		int val = str.charAt(i);
		if (char_set[val]) return false;
		char_set[val] = true;
	}
	return true;
}
Time complexity is O(n), where n is the length of the string, and space complexity is O(n).
We can reduce our space usage a little bit by using a bit vector. We will assume, in the below
code, that the string is only lower case ‘a’ through ‘z’. This will allow us to use just a single int
public static boolean isUniqueChars(String str) {
	int checker = 0;
	for (int i = 0; i < str.length(); ++i) {
		int val = str.charAt(i) - ‘a’;
		if ((checker & (1 << val)) > 0) return false;
		checker |= (1 << val);
	}
	return true;
}


Write code to reverse a C-Style String. (C-String means that “abcd” is represented as
five characters, including the null character.)

This is a classic interview question. The only “gotcha” is to try to do it in place, and to be care-
ful for the null character.

void reverse(char *str) {
	char * end = str;
	char tmp;
	if (str) {
		while (*end) {
			++end;
		}
		--end;
		while (str < end) {
			tmp = *str;
			*str++ = *end;
			*end-- = tmp;
		}
	}
}



Design an algorithm and write code to remove the duplicate characters in a string
without using any additional buffer. NOTE: One or two additional variables are fine.
An extra copy of the array is not.
FOLLOW UP
Write the test cases for this method.
			
First, ask yourself, what does the interviewer mean by an additional buffer? Can we use an
additional array of constant size?
Algorithm—No (Large) Additional Memory:
1.	 For each character, check if it is a duplicate of already found characters.
2.	 Skip duplicate characters and update the non duplicate characters.
Time complexity is O(N 2 ).
public static void removeDuplicates(char[] str) {
	if (str == null) return;
	int len = str.length;
	if (len < 2) return;
	int tail = 1;
	
for (int i = 1; i < len; ++i) {
		int j;
		for (j = 0; j < tail; ++j) {
			if (str[i] == str[j]) break;
		}
		if (j == tail) {
			str[tail] = str[i];
			++tail;
		}
	}
	str[tail] = 0;
}
Test Cases:
1.	 String does not contain any duplicates, e.g.: abcd
2.	 String contains all duplicates, e.g.: aaaa
3.	 Null string
4.	 String with all continuous duplicates, e.g.: aaabbb

5.	
String with non-contiguous duplicate, e.g.: abababa
Algorithm—With Additional Memory of Constant Size
public static void removeDuplicatesEff(char[] str) {
	if (str == null) return;
	int len = str.length;
	if (len < 2) return;
	boolean[] hit = new boolean[256];
	for (int i = 0; i < 256; ++i) {
		hit[i] = false;
	}
	hit[str[0]] = true;
		int tail = 1;
	for (int i = 1; i < len; ++i) {
		if (!hit[str[i]]) {
			str[tail] = str[i];
			++tail;
			hit[str[i]] = true;
		}
	}
	str[tail] = 0;
}
Test Cases:
1.	 String does not contain any duplicates, e.g.: abcd
2.	 String contains all duplicates, e.g.: aaaa
3.	 Null string
4.	 Empty string
5.	 String with all continuous duplicates, e.g.: aaabbb
6.	 String with non-contiguous duplicates, e.g.: abababa

1.5	
Write a method to replace all spaces in a string with ‘%20’.
SOLUTION
The algorithm is as follows:
1.	 Count the number of spaces during the first scan of the string.
2.	 Parse the string again from the end and for each character:

» » If a space is encountered, store “%20”.
» » Else, store the character as it is in the newly shifted location.
public static void ReplaceFun(char[] str, int length) {
	int spaceCount = 0, newLength, i = 0;
	for (i = 0; i < length; i++) {
		if (str[i] == ‘ ‘) {
			spaceCount++;
		}
	}
	newLength = length + spaceCount * 2;
	str[newLength] = ‘\0’;
	for (i = length - 1; i >= 0; i--) {
		if (str[i] == ‘ ‘) {
			str[newLength - 1] = ‘0’;
			str[newLength - 2] = ‘2’;
			str[newLength - 3] = ‘%’;
			newLength = newLength - 3;
		} else {
			str[newLength - 1] = str[i];
			newLength = newLength - 1;
		}
	}
}



1.6	
Given an image represented by an NxN matrix, where each pixel in the image is 4
bytes, write a method to rotate the image by 90 degrees. Can you do this in place?
			
The rotation can be performed in layers, where you perform a cyclic swap on the edges on
each layer. In the first for loop, we rotate the first layer (outermost edges). We rotate the
edges by doing a four-way swap first on the corners, then on the element clockwise from the
edges, then on the element three steps away.
Once the exterior elements are rotated, we then rotate the interior region’s edges.

public static void rotate(int[][] matrix, int n) {
	for (int layer = 0; layer < n / 2; ++layer) {
		int first = layer;
		int last = n - 1 - layer;
		for(int i = first; i < last; ++i) {
			int offset = i - first;
			int top = matrix[first][i]; // save top
			// left -> top
			matrix[first][i] = matrix[last-offset][first]; 			
			// bottom -> left
            matrix[last-offset][first] = matrix[last][last - offset]; 
			 // right -> bottom
            matrix[last][last - offset] = matrix[i][last];
			
		}
	}
}

1.8	
Assume you have a method isSubstring which checks if one word is a substring of
another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using
only one call to isSubstring (i.e., “waterbottle” is a rotation of “erbottlewat”).
	
Just do the following checks
1.	 Check if length(s1) == length(s2). If not, return false.
2.	 Else, concatenate s1 with itself and see whether s2 is substring of the result.
	 input: s1 = apple, s2 = pleap ==> apple is a substring of pleappleap
	 input: s1 = apple, s2 = ppale ==> apple is not a substring of ppaleppale

10	 public static boolean isRotation(String s1, String s2) {
int len = s1.length();
/* check that s1 and s2 are equal length and not empty */
if (len == s2.length() && len > 0) {
	/* concatenate s1 and s1 within new buffer */
	String s1s1 = s1 + s1;
	return isSubstring(s1s1, s2);
	}
	return false;
}
