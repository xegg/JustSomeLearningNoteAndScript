19.4	 Write a method which finds the maximum of two numbers. You should not use if-else
or any other comparison operator.
EXAMPLE
Input: 5, 10
Output: 10
		
pg 89
SOLUTION
Let’s try to solve this by “re-wording” the problem. We will re-word the problem until we get
something that has removed all if statements.
Rewording 1: If a > b, return a; else, return b.
Rewording 2: If (a - b) is negative, return b; else, return a.
Rewording 3: If (a - b) is negative, let k = 1; else, let k = 0. Return a - k * (a - b).
Rewording 4: Let c = a - b. Let k = the most significant bit of c. Return a - k * c.
We have now reworded the problem into something that fits the requirements. The code
for this is below.
getMax(int a, int b) {
int c = a - b;
int k = (c >> 31) & 0x1;
int max = a -

19.1	 Write a function to swap a number in place without temporary variables.
			
SOLUTION
This is a classic interview problem. If you haven’t heard this problem before, you can ap-
proach it by taking the difference between a and b:
public static void swap(int a, int b) {
	a = b - a; // 9 - 5 = 4
	b = b - a; // 9 - 4 = 5
	a = a + b; // 4 + 5 = 9
		
	System.out.println(“a: “ + a);
	System.out.println(“b: “ + b);
}
You can then optimize it as follows:
public static void swap_opt(int a, int b) {
	a = a^b;
	b = a^b;
	a = a^b;
	
	System.out.println(“a: “ + a);
	System.out.println(“b: “ + b);
}

19.5	 The Game of Master Mind is played as follows:	
The computer has four slots containing balls that are red (R), yellow (Y), green (G) or
blue (B). For example, the computer might have RGGB (e.g., Slot #1 is red, Slots #2 and
#3 are green, Slot #4 is blue).
You, the user, are trying to guess the solution. You might, for example, guess YRGB.
When you guess the correct color for the correct slot, you get a “hit”. If you guess
a color that exists but is in the wrong slot, you get a “pseudo-hit”. For example, the
guess YRGB has 2 hits and one pseudo hit.
For each guess, you are told the number of hits and pseudo-hits.
Write a method that, given a guess and a solution, returns the number of hits and
pseudo hits.
		
SOLUTION
This problem is straight-forward. We simply check the number of hits and pseudo-hits. We
will store the number of each in a class. To do a quick lookup to see it an element is a pseudo-
hit, we will use a bit mask.
public static class Result {
	public int hits;
	public int pseudoHits;
};
	public static Result estimate(String guess, String solution) {
	Result res = new Result();
	int solution_mask = 0;
	for (int i = 0; i < 4; ++i) {
		solution_mask |= 1 << (1 + solution.charAt(i) - ‘A’);
	}
	for (int i = 0; i < 4; ++i) {
		if (guess.charAt(i) == solution.charAt(i)) {
			++res.hits;
		} else if ((solution_mask &
				(1 << (1 + guess.charAt(i) - ‘A’))) >= 1) {
			++res.pseudoHits;
		}
	 }
	 return res;
}

19.7	 You are given an array of integers (both positive and negative). Find the continuous
sequence with the largest sum. Return the sum.	
EXAMPLE
Input: {2, -8, 3, -2, 4, -10}
Output: 5 (i.e., {3, -2, 4} )
	
SOLUTION
A simple linear algorithm will work by keeping track of the current subsequence sum. If that
sum ever drops below zero, that subsequence will not contribute to the subsequent maximal
subsequence since it would reduce it by adding the negative sum.

public static int getMaxSum(int[] a) {
	int maxsum = 0;
	int sum = 0;
	for (int i = 0; i < a.length; i++) {
		sum += a[i];
		if (maxsum < sum) {
			maxsum = sum;
		} else if (sum < 0) {
			sum = 0;
		}
	}
	return maxsum;
}
NOTE: If the array is all negative numbers, what is the correct behavior? Con-
sider this simple array {-3, -10, -5}. You could make a good argument that the
maximum sum is either: (A) -3 (if you assume the subsequence can’t be empty)
(B) 0 (the subsequence has length 0) or (C) MINIMUM_INT (essentially the error
case). We went with option B (max sum = 0), but there’s no “correct” answer. This
is a great thing to discuss with your interviewer to show how careful you are.

19.8	 Design a method to find the frequency of occurrences of any given word in a book.
	
SOLUTION
The first question – which you should ask your interviewer – is if you’re just asking for a
single word (“single query”) or if you might, eventually, use the same method for many dif-
ferent words (“repetitive queries”)? That is, are you simply asking for the frequency of “dog”,
or might you ask for “dog,” and then “cat,” “mouse,” etc?
Solution: Single Query
In this case, we simply go through the book, word by word, and count the number of times
that a word appears. This will take O(n) time. We know we can’t do better than that, as we
must look at every word in the book.
Solution: Repetitive Queries
In this case, we create a hash table which maps from a word to a frequency. Our code is then
like this:
Hashtable<String, Integer> setupDictionary(String[] book) {
	Hashtable<String, Integer> table =
		new Hashtable<String, Integer>();
	for (String word : book) {
		word = word.toLowerCase();
		if (word.trim() != “”) {
			if (!table.containsKey(word)) table.put(word, 0);
			table.put(word, table.get(word) + 1);
		}
	}
	return table;
} int getFrequency(Hashtable<String, Integer> table, String word) {
	if (table == null || word == null) return -1;
	word = word.toLowerCase();
	if (table.containsKey(word)) {
		return table.get(word);
	}
	
return 0; }
