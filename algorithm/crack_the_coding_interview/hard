20.2	 Write a method to shuffle a deck of cards. It must be a perfect shuffle - in other words,
each 52! permutations of the deck has to be equally likely. Assume that you are given
a random number generator which is perfect.	
	
pg 91
SOLUTION
This is a very well known interview question, and a well known algorithm. If you aren’t one
of the lucky few to have already know this algorithm, read on.
Let’s start with a brute force approach: we could randomly selecting items and put them into
a new array. We must make sure that we don’t pick the same item twice though by somehow
marking the node as dead.
Array:					
[1] [2] [3] [4] [5]
Randomly select 4:		
[4] [?] [?] [?] [?]
Mark element as dead:	 [1] [2] [3] [X] [5]
The tricky part is, how do we mark [4] as dead such that we prevent that element from be-
ing picked again? One way to do it is to swap the now-dead [4] with the first element in the
array:
Array:					
Randomly select 4:		
Swap dead element:		 [1] [2] [3] [4] [5]
[4] [?] [?] [?] [?]
[X] [2] [3] [1] [5]
Array:					
Randomly select 3:		
Swap dead element:		 [X] [2] [3] [1] [5]
[4] [3] [?] [?] [?]
[X] [X] [2] [1] [5]
By doing it this way, it’s much easier for the algorithm to “know” that the first k elements are
dead than that the third, fourth, nineth, etc elements are dead. We can also optimize this by
merging the shuffled array and the original array.
Randomly select 4:		
Randomly select 3:		
[4] [2] [3] [1] [5]
[4] [3] [2] [1] [5]
This is an easy algorithm to implement iteratively:
public static void shuffleArray(int[] cards) {
	int temp, index;
	for (int i = 0; i < cards.length; i++){
		index = (int) (Math.random() * (cards.length - i)) + i;
		temp = cards[i];
		cards[i] = cards[index];
		cards[index] = temp;
	}
}

20.6	 Describe an algorithm to find the largest 1 million numbers in 1 billion numbers. As-
sume that the computer memory can hold all one billion numbers.
	
SOLUTION
Approach 1: Sorting
Sort the elements and then take the first million numbers from that. Complexity is O(n log n).
Approach 2: Max Heap
1.	 Create a Min Heap with the first million numbers.
2.	 For each remaining number, insert it in the Min Heap and then delete the minimum
value from the heap.
3.	 The heap now contains the largest million numbers.
4.	 This algorithm is O(n log m), where m is the number of values we are looking for.
Approach 3: Selection Rank Algorithm (if you can modify the original array)
Selection Rank is a well known algorithm in computer science to find the ith smallest (or
largest) element in an array in expected linear time. The basic algorithm for finding the ith
smallest elements goes like this:
» » Pick a random element in the array and use it as a ‘pivot’. Move all elements smaller than
that element to one side of the array, and all elements larger to the other side.
» » If there are exactly i elements on the right, then you just find the smallest element on
that side.
» » Otherwise, if the right side is bigger than i, repeat the algorithm on the right. If the right
side is smaller than i, repeat the algorithm on the left for i – right.size().
Given this algorithm, you can either:
» » Tweak it to use the existing partitions to find the largest i elements (where i = one mil-
lion).
» » Or, once you find the ith largest element, run through the array again to return all ele-
ments greater than or equal to it.
This algorithm has expected O(n) time.
