5.1	
You are given two 32-bit numbers, N and M, and two bit positions, i and j. Write a
method to set all bits between i and j in N equal to M (e.g., M becomes a substring of
N located at i and starting at j).
EXAMPLE:
Input: N = 10000000000, M = 10101, i = 2, j = 6
Output: N = 10001010100
			
pg 58
SOLUTION
This code operates by clearing all bits in N between position i and j, and then ORing to put
M in there.

public static int updateBits(int n, int m, int i, int j) {
	int max = ~0; /* All 1’s */
	
// 1’s through position j, then 0’s
	int left = max - ((1 << j) - 1);
	// 1’s after position i
	 int right = ((1 << i) - 1);
	// 1’s, with 0s between i and j
    int mask = left | right;
	} // Clear i through j, then put m in there
    return (n & mask);
}

5.4	
Explain what the following code does: ((n & (n-1)) == 0).
				
We can work backwards to solve this question.
What does it mean if A & B == 0?
It means that A and B never have a 1 bit in the same place. So if n & (n-1) == 0, then n and
n-1 never share a 1.
What does n-1 look like (as compared with n)?
Try doing subtraction by hand (in base 2 or 10). What happens?
1101011000 [base 2]
-
1
= 1101010111 [base 2]
593100 [base 10]
-
1
= 593099 [base 10]
When you subtract 1 from a number, you look at the least significant bit. If it’s a 1 you change
it to zero and you are done. If it’s a zero, you must “borrow” from a larger bit. So, you go to
increasingly larger bits, changing each bit from a 0 to a 1, until you find a 1. You flip that one
to a 0 and you are done.
Thus, n-1 will look like n, except that n’s initial 0s will be 1’s in n-1, and n’s least significant 1
will be a 0 in (n-1). That is:
if
n = abcde1000
then n-1 = abcde0111
So what does n & (n-1) == 0 indicate?
n and (n-1) must have no 1s in common. Given that they look like this:
if
n = abcde1000
then n-1 = abcde0111
abcde must be all 0s, which means that n must look like this: 00001000. n is therefore a
power of two.
So, we have our answer: ((n & (n-1)) == 0) checks if n is a power of 2 (or 0).

5.5	
Write a function to determine the number of bits required to convert integer A to
integer B.
Input: 31, 14
Output: 2
				
pg 58
SOLUTION
This seemingly complex problem is actually rather straightforward. To approach this, ask
yourself how you would figure out which bits in two numbers are different. Simple: with an
xor.
Each 1 in the xor will represent one different bit between A and B. We then simply need to
count the number of bits that are 1.
1	
2	
3	
4	
5	
6	
7	
public static int bitSwapRequired(int a, int b) {
	
int count = 0;
	
for (int c = a ^ b; c != 0; c = c >> 1) {
		
count += c & 1;
	
}
	
return count
