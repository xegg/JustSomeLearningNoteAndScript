5.1	
You are given two 32-bit numbers, N and M, and two bit positions, i and j. Write a
method to set all bits between i and j in N equal to M (e.g., M becomes a substring of
N located at i and starting at j).
EXAMPLE:
Input: N = 10000000000, M = 10101, i = 2, j = 6
Output: N = 10001010100
			
pg 58
SOLUTION
This code operates by clearing all bits in N between position i and j, and then ORing to put
M in there.

public static int updateBits(int n, int m, int i, int j) {
	int max = ~0; /* All 1’s */
	
// 1’s through position j, then 0’s
	int left = max - ((1 << j) - 1);
	// 1’s after position i
	 int right = ((1 << i) - 1);
	// 1’s, with 0s between i and j
    int mask = left | right;
	} // Clear i through j, then put m in there
    return (n & mask);
}

5.4	
Explain what the following code does: ((n & (n-1)) == 0).
				
We can work backwards to solve this question.
What does it mean if A & B == 0?
It means that A and B never have a 1 bit in the same place. So if n & (n-1) == 0, then n and
n-1 never share a 1.
What does n-1 look like (as compared with n)?
Try doing subtraction by hand (in base 2 or 10). What happens?
1101011000 [base 2]
-
1
= 1101010111 [base 2]
593100 [base 10]
-
1
= 593099 [base 10]
When you subtract 1 from a number, you look at the least significant bit. If it’s a 1 you change
it to zero and you are done. If it’s a zero, you must “borrow” from a larger bit. So, you go to
increasingly larger bits, changing each bit from a 0 to a 1, until you find a 1. You flip that one
to a 0 and you are done.
Thus, n-1 will look like n, except that n’s initial 0s will be 1’s in n-1, and n’s least significant 1
will be a 0 in (n-1). That is:
if
n = abcde1000
then n-1 = abcde0111
So what does n & (n-1) == 0 indicate?
n and (n-1) must have no 1s in common. Given that they look like this:
if
n = abcde1000
then n-1 = abcde0111
abcde must be all 0s, which means that n must look like this: 00001000. n is therefore a
power of two.
So, we have our answer: ((n & (n-1)) == 0) checks if n is a power of 2 (or 0).

5.5	
Write a function to determine the number of bits required to convert integer A to
integer B.
Input: 31, 14
Output: 2
				
pg 58
SOLUTION
This seemingly complex problem is actually rather straightforward. To approach this, ask
yourself how you would figure out which bits in two numbers are different. Simple: with an
xor.
Each 1 in the xor will represent one different bit between A and B. We then simply need to
count the number of bits that are 1.

public static int bitSwapRequired(int a, int b) {
	int count = 0;
	for (int c = a ^ b; c != 0; c = c >> 1) {
		count += c & 1;
	}
return count
}

5.6	
Write a program to swap odd and even bits in an integer with as few instructions as
possible (e.g., bit 0 and bit 1 are swapped, bit 2 and bit 3 are swapped, etc).
				
pg 58
SOLUTION
Mask all odd bits with 10101010 in binary (which is 0xAA), then shift them left to put them in
the even bits. Then, perform a similar operation for even bits. This takes a total 5 instructions.

public static int swapOddEvenBits(int x) {
	return ( ((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1) );
}

5.7	
An array A[1...n] contains all the integers from 0 to n except for one number which is
missing. In this problem, we cannot access an entire integer in A with a single opera-
tion. The elements of A are represented in binary, and the only operation we can use
to access them is “fetch the jth bit of A[i]”, which takes constant time. Write code to
find the missing integer. Can you do it in O(n) time?

SOLUTION
Picture a list of binary numbers between 0 to n. What will change when we remove one
number? We’ll get an imbalance of 1s and 0s in the least significant bit. That is, before re-
moving the number k, we have this list of least significant bits (in some order):
0 0 0 0 0 1 1 1 1 1
OR
0 0 0 0 0 1 1 1 1
Note that if 0 is removed, we always wind up with count(1) >= count(0). If 1 is removed, we
wind up with count(1) < count(0). Therefore, we can look at the least significant bit to figure
out in O(N) time whether the missing number has a 0 or a 1 in the least significant bit (LSB).
If LSB(missing) == 0, then we can discard all numbers with LSB = 1. If LSB(missing) == 1, we
can discard all numbers with LSB = 0.
What about the next iteration, with the second least significant bit (SLSB)? We’ve discarded
all the numbers with LSB = 1, so our list looks something like this (if n = 5, and missing = 3):
00000
00001
00010
-----
00100
00101
00110
00111
01000
01001
01010
01011
01100
01101
Our SLSBs now look like 0 0 1 0 1 0. Using the same logic as we applied for LSB, we can figure
out that the missing number must have SLSB = 1. Our number must look like xxxx11.
Third iteration, discarding numbers with SLSB = 0:
00000
00001
00010
-----
00100
00101
00110
00111
01000
01001
01010
01011
01100
01101
We can now compute that count(TLSB = 1) = 1 and count(TLSB = 1) = 1. Therefore, TLSB = 0.
We can recurse repeatedly, building our number bit by bit:
141
Cracking the Coding Interview | Concepts and AlgorithmsSolutions to Chapter 5 | Bit Manipulation
int findMissing(ArrayList<BitInteger> array) { 
return findMissing(array, BitInteger.INTEGER_SIZE - 1); }
int findMissing(ArrayList<BitInteger> input, int column) {
	if (column < 0) { // Base case and error condition
	return 0;
} ArrayList<BitInteger> oddIndices = new ArrayList<BitInteger>();
	ArrayList<BitInteger> evenIndices = new ArrayList<BitInteger>();
	for (BitInteger t : input) {
		if (t.fetch(column) == 0) {
			evenIndices.add(t);
		} else {
			oddIndices.add(t);
		}
	}
	if (oddIndices.size() >= evenIndices.size()) {
		return (findMissing(evenIndices, column - 1)) << 1 | 0;
	} else {
		return (findMissing(oddIndices, column - 1)) << 1 | 1;
	}
} What is the run-time of this algorithm? On the first pass, we look at O(N) bits. On the second
pass, we’ve eliminated N/2 numbers, so we then look at O(N/2) bits. On the third pass, we
have eliminated another half of the numbers, so we then look at O(N/4) bits. If we keep go-
ing, we get an equation that looks like:
O(N) + O(N/2) + O(N/4) + O(N/8) + ... = O(2N) = O(N)
Our run-time is O(N).
