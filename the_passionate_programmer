A musician wants to either be great (and famous for it!) or not do it at all.

I’m often asked why it is that there are so many good musicians who
are also good software developers. That’s the reason. It’s not because
the brain functions are the same or that they’re both detail-oriented or
both require creativity. It’s because a person who wants to be great is
far more likely to become great than someone who just wants to do
their job

### Lead or Bleed
1. Make a list of early, middle, and late adoption technologies based
on today’s market. Map them out on paper from left to right; the
left is bleeding edge, and the right is filled by technologies that
are in their sunsets. Push yourself to find as many technologies in
each part of the spectrum as possible. Be as granular as possible
about where in the curve they fall in relation to one another.
When you have as many technologies mapped out as you can
think of, mark the ones that you consider yourself strong in. Then,L EAD OR B LEED ?
perhaps in a different color, mark the ones that you have some
experience with but aren’t authoritative on. Where are most of
your marks on the adoption curve? Do they clump? Are they
spread evenly across? Are there any technologies around the far
edges that you have some special interest in?

### 3 Coding don't cut it anymore
Now is the time to think about business domains you invest  your tine in.

Act on It!
1. Schedule lunch with a businessperson. Talk to them about how
they do their job. As you talk to them, ask yourself what you would
have to change or learn if you aspired to have their job. Ask about
the specifics of their daily work. Talk to them about how technol-
ogy helps them (or slows them down) on the job. Think about your
work from their perspective.
Do this regularly.
32C ODING D ON ’ T C UT I T A NYMORE
This may seem like an awkward or uncomfortable idea. That’s OK.
I started doing this several years ago, and it made a huge differ-
ence in the way I understood and related to the business I was
supporting. I also got more comfortable talking to my customers,
which is a positive side effect.
2. Pick up a trade magazine for your company’s industry. You prob-
ably don’t even have to buy one. Most companies have back
issues of trade rags lying around somewhere. Start trying to work
your way through a magazine. You may not understand every-
thing you read, but be persistent. Make lists of questions you can
ask your management or business clients. Even if your questions
seem stupid to you, your business clients will appreciate that you
are trying to learn.
Look for industry websites that you can monitor on a regular basis.
In both the websites and the magazines, pay special attention to
what the big news items and the feature articles are about. What
is your industry struggling with? What’s the hot new issue right now?
Whatever it is, bring it up with your business clients. Ask them to
explain it and to give you their opinions. Think about how these
current trends affect your company, your division, your team, and
eventually your work.

### 4 Be the worst.
Act on It!
1. Find a “be the worst” situation for yourself. You may not have the
luxury of immediately switching teams or companies just because
you want to work with better people. Instead, find a volunteer
project on which you can work with other developers who will
make you better via osmosis. Check for developer group meetings
in your city, and attend those meetings. Developers are often look-
ing for spare-time projects on which to practice new techniques
and hone their skills.
If you don’t have an active developer community nearby, use the
Internet. Pick an open source project that you admire and whose
developers appear to be at that “next level” you’re looking to
reach. Go through the project’s to-do list or mailing list archives,
pick a feature or a major bug fix, and code away! Emulate the
style of the project’s surrounding code. Turn it into a game. Make
your design and code so indistinguishable from the rest of the
project that even the original developers eventually won’t remem-
ber who wrote it. Then, when you’re satisfied with your work, submit
it as a patch. If it’s good, it will be accepted into the project. Start
over, and do it again. If you’ve made decisions that the project’s
developers disagree with, either incorporate their feedback and
resubmit or take note of the changes they make. On your next
patch, try to get it in with less rework. Eventually, you’ll find yourself
to be a trusted member of the project team. You’ll be amazed at
what you can learn from a remote set of senior developers, even
if you never get a chance to hear their voices.

### 6 Don't listen your parents. 
Your parents would rather you be OK than have a remarkable career
at the cost of great personal risk. More than any other third party you
might look to, your parents are going to give you fear-driven advice.
Fear-driven advice is geared toward not losing. Thinking about not los-
ing is not the way to win! Winners take risks. They think about where
they want to go—not where the rest of the pack is. Fear-driven career
planning is more likely to land you in a cubicle farm for the rest of your
life than on the path to greatness. Sure, it’s safe, but it’s no fun.

A generation ago, fun wasn’t a deciding factor when we talked about
career choices. Jobs aren’t supposed to be fun. They’re supposed to
bring home the bacon. Fun is what you do on your off days. Fun hap-
pens in the evenings and weekends. But if your job isn’t fun, as we’ve
come to realize, you don’t do a fantastic job at it. It’s not so much that
things are different now, but our cultural understanding of what it
means to work has shifted for the better. More of us understand that
passion leads to excellence. And without fun, there’s unlikely to be any
passion in a software job.

Another career decision-making factor that is likely not in line with
your parents’ view of the working world is that it’s OK (and often
preferable) to change jobs. A well-rounded software professional has
seen many angles of the industry: product development, IT support,
internal business systems development, and government work. The
more domains you’ve seen and the more technical architectures you’ve
slogged through, the more prepared you are to make the right deci-
sions on tougher projects. Staying in a single company, working your
way up the ranks, is a limiting environment in which to grow as a
developer. Gone are the days of the “lifer” who would join a big com-
pany and settle in for a full career. This sort of behavior used to be a
sign of dedication. Now it’s a liability. If you’ve worked in only one
place and seen one set of systems, many (smart) managers would see
41D ON ’ T L ISTEN TO Y OUR P ARENTS
that as a strike against you when making a hiring decision. I’d per-
sonally rather hire someone who has seen a variety of successes and
failures in different environm

Act on It!
1. What are your biggest career fears? Think about the last few
career choices you made. They don’t have to be big decisions
(after all, if you’re making fear-driven choices, your decisions likely
aren’t big anyway). They could be whether you took on special
assignments or whether you applied for a job change or promo-
tion. Make a list of these choices, and, for each one, force your-
self to make an honest assessment: how much was your decision
driven by fear? What would you have done if fear had not been
a factor? If the decision was indeed fear-driven, how can you
reverse it or find a similar opportunity in which to make the less
fear-driven choice?

I could noless turn down the chance to work for myself on some-
thing I truly love, no matter how safe the alternative
might be. When I’m old and dying, I plan to look back
on my life and say, “Wow, that was an adventure,” not
“Wow, I sure felt safe.”

### 7 Be a Generalism

Act on It!
1. On a piece of paper or a whiteboard, list the dimensions on which
you may or may not be generalizing your knowledge and abilities.
For each dimension, write your specialty. For example, if Platform
and Operating System is one of your dimensions, you might write
Windows/.NET next to it. Now, to the right of your specialty, write
one or more topics you should put into your “To Learn” list. Contin-
uing with the same example, you might write Linux and Java (or
even Ruby or Perl).
As soon as possible (some time this week at the latest!), find thirty
minutes of time to start addressing at least one of the “To Learn”
items on your list. Don’t just read about it. If possible, get some
hands-on experience. If it’s web technology, then download a
web server package and set it up yourself. If it’s a business topic,
find one of your customers at work and ask them to go out for
lunch for a chat.

### 8 Be a Specialist

Too many of us seem to believe that specializing in something simply

Act on It!
1. Do you use a programming language that compiles and runs on a
virtual machine? If so, take some time to learn about the internals
of how your VM works. For Java, .NET, and Smalltalk, many books
and websites are devoted to the topic. It’s easier to learn about
than you think.
Whether your language relies on a VM or not, take some time
to study just what happens when you compile a source file. How
does the code you type go from being text that you can read to
instructions that a computer can execute? What would it mean
to write your own compiler?
When you import or use external libraries, where do they come
from? What does it actually mean to import an external library?
How does your compiler, operating system, or virtual machine link
multiple pieces of code together to form a coherent system?
Learning these facts will take you several steps closer to being an
expert specialist in your technology of choice.
2. Find an opportunity—at work or outside—to teach a class on some
aspect of a technology that you would like to develop some
depth in. As you’ll see in Be a Mentor, teaching is one of the best
ways to learn.eans not knowing about other things.
