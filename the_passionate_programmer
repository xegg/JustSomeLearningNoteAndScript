A musician wants to either be great (and famous for it!) or not do it at all.

I’m often asked why it is that there are so many good musicians who
are also good software developers. That’s the reason. It’s not because
the brain functions are the same or that they’re both detail-oriented or
both require creativity. It’s because a person who wants to be great is
far more likely to become great than someone who just wants to do
their job

### Lead or Bleed
1. Make a list of early, middle, and late adoption technologies based
on today’s market. Map them out on paper from left to right; the
left is bleeding edge, and the right is filled by technologies that
are in their sunsets. Push yourself to find as many technologies in
each part of the spectrum as possible. Be as granular as possible
about where in the curve they fall in relation to one another.
When you have as many technologies mapped out as you can
think of, mark the ones that you consider yourself strong in. Then,L EAD OR B LEED ?
perhaps in a different color, mark the ones that you have some
experience with but aren’t authoritative on. Where are most of
your marks on the adoption curve? Do they clump? Are they
spread evenly across? Are there any technologies around the far
edges that you have some special interest in?

### 3 Coding don't cut it anymore
Now is the time to think about business domains you invest  your tine in.

Act on It!
1. Schedule lunch with a businessperson. Talk to them about how
they do their job. As you talk to them, ask yourself what you would
have to change or learn if you aspired to have their job. Ask about
the specifics of their daily work. Talk to them about how technol-
ogy helps them (or slows them down) on the job. Think about your
work from their perspective.
Do this regularly.
32C ODING D ON ’ T C UT I T A NYMORE
This may seem like an awkward or uncomfortable idea. That’s OK.
I started doing this several years ago, and it made a huge differ-
ence in the way I understood and related to the business I was
supporting. I also got more comfortable talking to my customers,
which is a positive side effect.
2. Pick up a trade magazine for your company’s industry. You prob-
ably don’t even have to buy one. Most companies have back
issues of trade rags lying around somewhere. Start trying to work
your way through a magazine. You may not understand every-
thing you read, but be persistent. Make lists of questions you can
ask your management or business clients. Even if your questions
seem stupid to you, your business clients will appreciate that you
are trying to learn.
Look for industry websites that you can monitor on a regular basis.
In both the websites and the magazines, pay special attention to
what the big news items and the feature articles are about. What
is your industry struggling with? What’s the hot new issue right now?
Whatever it is, bring it up with your business clients. Ask them to
explain it and to give you their opinions. Think about how these
current trends affect your company, your division, your team, and
eventually your work.

### 4 Be the worst.
Act on It!
1. Find a “be the worst” situation for yourself. You may not have the
luxury of immediately switching teams or companies just because
you want to work with better people. Instead, find a volunteer
project on which you can work with other developers who will
make you better via osmosis. Check for developer group meetings
in your city, and attend those meetings. Developers are often look-
ing for spare-time projects on which to practice new techniques
and hone their skills.
If you don’t have an active developer community nearby, use the
Internet. Pick an open source project that you admire and whose
developers appear to be at that “next level” you’re looking to
reach. Go through the project’s to-do list or mailing list archives,
pick a feature or a major bug fix, and code away! Emulate the
style of the project’s surrounding code. Turn it into a game. Make
your design and code so indistinguishable from the rest of the
project that even the original developers eventually won’t remem-
ber who wrote it. Then, when you’re satisfied with your work, submit
it as a patch. If it’s good, it will be accepted into the project. Start
over, and do it again. If you’ve made decisions that the project’s
developers disagree with, either incorporate their feedback and
resubmit or take note of the changes they make. On your next
patch, try to get it in with less rework. Eventually, you’ll find yourself
to be a trusted member of the project team. You’ll be amazed at
what you can learn from a remote set of senior developers, even
if you never get a chance to hear their voices.

### 6 Don't listen your parents. 
Your parents would rather you be OK than have a remarkable career
at the cost of great personal risk. More than any other third party you
might look to, your parents are going to give you fear-driven advice.
Fear-driven advice is geared toward not losing. Thinking about not los-
ing is not the way to win! Winners take risks. They think about where
they want to go—not where the rest of the pack is. Fear-driven career
planning is more likely to land you in a cubicle farm for the rest of your
life than on the path to greatness. Sure, it’s safe, but it’s no fun.

A generation ago, fun wasn’t a deciding factor when we talked about
career choices. Jobs aren’t supposed to be fun. They’re supposed to
bring home the bacon. Fun is what you do on your off days. Fun hap-
pens in the evenings and weekends. But if your job isn’t fun, as we’ve
come to realize, you don’t do a fantastic job at it. It’s not so much that
things are different now, but our cultural understanding of what it
means to work has shifted for the better. More of us understand that
passion leads to excellence. And without fun, there’s unlikely to be any
passion in a software job.

Another career decision-making factor that is likely not in line with
your parents’ view of the working world is that it’s OK (and often
preferable) to change jobs. A well-rounded software professional has
seen many angles of the industry: product development, IT support,
internal business systems development, and government work. The
more domains you’ve seen and the more technical architectures you’ve
slogged through, the more prepared you are to make the right deci-
sions on tougher projects. Staying in a single company, working your
way up the ranks, is a limiting environment in which to grow as a
developer. Gone are the days of the “lifer” who would join a big com-
pany and settle in for a full career. This sort of behavior used to be a
sign of dedication. Now it’s a liability. If you’ve worked in only one
place and seen one set of systems, many (smart) managers would see
41D ON ’ T L ISTEN TO Y OUR P ARENTS
that as a strike against you when making a hiring decision. I’d per-
sonally rather hire someone who has seen a variety of successes and
failures in different environm

Act on It!
1. What are your biggest career fears? Think about the last few
career choices you made. They don’t have to be big decisions
(after all, if you’re making fear-driven choices, your decisions likely
aren’t big anyway). They could be whether you took on special
assignments or whether you applied for a job change or promo-
tion. Make a list of these choices, and, for each one, force your-
self to make an honest assessment: how much was your decision
driven by fear? What would you have done if fear had not been
a factor? If the decision was indeed fear-driven, how can you
reverse it or find a similar opportunity in which to make the less
fear-driven choice?

I could noless turn down the chance to work for myself on some-
thing I truly love, no matter how safe the alternative
might be. When I’m old and dying, I plan to look back
on my life and say, “Wow, that was an adventure,” not
“Wow, I sure felt safe.”

### 7 Be a Generalism

Act on It!
1. On a piece of paper or a whiteboard, list the dimensions on which
you may or may not be generalizing your knowledge and abilities.
For each dimension, write your specialty. For example, if Platform
and Operating System is one of your dimensions, you might write
Windows/.NET next to it. Now, to the right of your specialty, write
one or more topics you should put into your “To Learn” list. Contin-
uing with the same example, you might write Linux and Java (or
even Ruby or Perl).
As soon as possible (some time this week at the latest!), find thirty
minutes of time to start addressing at least one of the “To Learn”
items on your list. Don’t just read about it. If possible, get some
hands-on experience. If it’s web technology, then download a
web server package and set it up yourself. If it’s a business topic,
find one of your customers at work and ask them to go out for
lunch for a chat.

### 8 Be a Specialist

Too many of us seem to believe that specializing in something simply

Act on It!
1. Do you use a programming language that compiles and runs on a
virtual machine? If so, take some time to learn about the internals
of how your VM works. For Java, .NET, and Smalltalk, many books
and websites are devoted to the topic. It’s easier to learn about
than you think.
Whether your language relies on a VM or not, take some time
to study just what happens when you compile a source file. How
does the code you type go from being text that you can read to
instructions that a computer can execute? What would it mean
to write your own compiler?
When you import or use external libraries, where do they come
from? What does it actually mean to import an external library?
How does your compiler, operating system, or virtual machine link
multiple pieces of code together to form a coherent system?
Learning these facts will take you several steps closer to being an
expert specialist in your technology of choice.
2. Find an opportunity—at work or outside—to teach a class on some
aspect of a technology that you would like to develop some
depth in. As you’ll see in Be a Mentor, teaching is one of the best
ways to learn.eans not knowing about other things.

### 10 Love it or leave it

What I do know is that I’m a serial opportunist. When
I see something interesting and exciting to me, I jump
in and do whatever it takes to succeed. Usually this
means learning new skills and picking up new capabil-
ities. Some may find it a drag to build new skills up, but
for some reason I love learning how to do new things.
After all, new skills let you do new things. And I’ve never
defined myself by my skills. Instead, I’ve always defined
myself by what I have done and what

### Have fun
You could have chosen any number of career paths, but this one is
exciting. It’s creative. It requires deep thinking and rewards you with
a sense of being able to do something that most of the people you meet
each day can’t imagine being able to do. We may worry about pro-
gressing to the next level, making an impact, or gaining respect from
our co-workers or our peers in the industry, but if you really stop to
think about it, we’ve got it really good.

The process in this book is a loop that repeats until you retire. 
Research, invest, execute, market, repeat. Spending too much time 
inside any iteration of the loop puts you at risk of becoming suddenly obsolete.

# You already lost your job
Act on It!
1. If you’re a programmer, try a day or two of doing your job as if
you were a tester or a project manager. What are the many roles
that you might play from day to day that you have never explicitly
considered? Make a list, and try them on for size. Spend a day on
each. You might not even change your actual work output, but
you’ll see your work differently.

G
###  Path with no destination.
Act on It!
1. In his book The Miracle of Mindfulness [Han99], Thich Naht Hanh
presents a suggestion: the next time you have to wash the dishes,
don’t wash them to get them done. Try to enjoy the experience
of washing the dishes. Don’t focus on finishing them. Focus on the
act of washing them itself.
Doing the dishes is a mundane task that almost nobody savors.
Software developers have a lot of similar drudgery to get through
in the average day, such as time tracking and expense report-
ing, for example. The next time you have to do a task like this,
see whether you can find a way to focus on the task as you do it
instead of anxiously rushing to finish it.

### The fat man in the mirror.
Act on It!
1. Do a 360 review:
• Make a list of trusted people who you feel comfortable ask-
ing for feedback. The list should preferably contain represen-
tatives from your peers, customers, and managers (and sub-
ordinates if you have any).
• Make another list of about ten characteristics you believe are
important measurements of you as a professional.
• Convert this list to a questionnaire. On the questionnaire, ask
for participants to rate you in terms of each characteristic.
Also include the question “What should I have asked?”
• Distribute the questionnaire to the list of people from the first
step. Ask that your reviewers be constructively critical. What
you need is honest feedback—not sugarcoating.
When you get the completed answers back, read through all of
them, and compile a list of actions you are going to take as a
result. If you’ve asked the right questions of the right people, you
are going to get some actionable items. Share the outcome of
your questionnaire with your reviewers—not the answers but the
resultant changes you plan to make. Be sure to thank them.
Repeat this process occasionally.
2. Start keeping a journal. It could be a weblog, as we discussed in
Let Your Voice Be Heard, on page 162, or a personal diary. Write
about what you’re working on, what you’re learning, and your
opinions about the industry.
After you’ve been keeping the journal for some time, reread old
entries. Do you still agree

### The south indian monkey trap
Act on It!
1. Find your monkey traps—What are your rigid assumptions? What
are those values that guide your daily actions without you even
consciously knowing it?
Make a table with two columns, “Career” and “Technology.”
Under each heading list the values that you hold unfalteringly true.
For example, under “Career,” what have you always known to be
one of your strengths? Or your weaknesses? What is your career
goal (“I want to be a CEO!”)? What are the right ways to achieve
your goal?
In the “Technology” column, list what you most value about the
technologies you choose to invest in. What are the most impor-
tant attributes of a technology that should be considered when
making a choice? How do you make a scalable system? What’s
the most productive environment in which to develop software?
What are the best and worst platforms in general?
When you have your list down and you feel like it’s fairly complete,
go one at a time through the list and mentally reverse each state-
ment. What if the opposite of each assertion were true? Allow
yourself to honestly challenge each assertion.
This is a list of your vulnerabilities.
2. Know your enemy—Pick the technology you hate most, and do a
project in it. Developers tend to stratify themselves into competing
197T HE S OUTH I NDIAN M ONKEY T RAP
camps. The .NET people hate J2EE, and the J2EE people hate .NET.
The UNIX people hate Windows, and the Windows people hate
UNIX.
Pick an easy project, and try to do a great application in the tech-
nology you hate. If you’re a Java person, show those .NET folks how
a real developer uses their platform! Best case, you’ll learn that the
technology you hate isn’t all that bad and that it is in fact possible
to develop good code with it. You’ll also have a (granted, unde-
veloped) new skill that you might need to take advantage of in
the future. Worst case, the exercise will be a practice session for
you, and you’ll have better fodder for your arguments.

### Better Than yesterday
Act on It!
1. Make a list of the difficult or complex improvements you’d like to
make; they can be personal or professional. It’s OK if you have a
fairly long list. Now, for each item in the list, think about what you
could do today to make yourself or that item better than yester-
day. Tomorrow, look at the list again. Was yesterday better than
the day before? How can you make today better? Do it again
the next day. Put it on your calendar. Spend two minutes thinking
about this each morning.
205

### Avoid waterfall career planning
The important thing to realize is that change is not only possible in
your career but necessary. As a software developer, you would never
want to pour yourself into developing something your client doesn’t
want. Agile methodologies help prevent you from doing so. The same
is true of your career. Set big goals, but make constant corrections along
the way. Learn from the experience, and change the goals as you go.
Ultimately, a happy customer is what we all want (especially when,
as we plan our careers, we are our own customers)—not a completed
requirement.
